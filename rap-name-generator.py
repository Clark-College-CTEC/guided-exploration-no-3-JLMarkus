# Guided Exploration No. 3
# Jason Markus

# imports the random library in order to generate a random number
import random

# declares in empty list in which the rap names will be stored
possible_names = []

# opens a new file named rap-names-output.txt, which will store the names that are generated by the code
outputFile = open('rap-names-output.txt', 'w')

# opens rap-names.txt for read access, then assigns a handle to the file named “dataFile"
with open('rap-names.txt', 'r') as dataFile:
    # iterates through each line in the rap-names.txt file, one line at a time
    for name in dataFile:
        # during each iteration of the loop, reads in a line from the rap-names.txt file and then strips off
        # the invisible line-feed that’s at the end of each line, the name is then appended to possible_names
        possible_names.append(name.rstrip())

# prompts the user for the number of rap names to generate
count = int(input('How many rap names would you like to create? '))
# prompts the user for how many parts will be part of the entire rap name
parts = int(input('How many parts should the name contain? '))

# uses a counted loop to generate the total number of rap names the user wants to generate
for i in range(count):
    # new list is declared, that will hold the rap name parts
    name_parts = []
    # iterates for the number of rap names that the user wants as part of the names
    for j in range(parts):
        # each time it iterates it will randomly select a names from the possible_names list and append it to the name_parts list
        name_parts.append(possible_names[random.randint(0, len(possible_names)-1)])

    # takes the handle to the file where we are going to write out the generated rap names
    # this code will take the name_parts list contents and glue them together with a space
    outputFile.write(f"{' '.join(name_parts)}\n")
    # displays the names in the terminal within VS Code that were written to the output file
    print(f"{' '.join(name_parts)}")

# closes the output file using the .close() file method
outputFile.close()
